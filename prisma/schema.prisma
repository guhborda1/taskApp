// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String          @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  accounts                 Account[]
  sessions                 Session[]
  Authenticators           Authenticator[]
  password                 String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  role                     String          @default("user")
  Proposta                 Proposta[]
}

model Contato {
  id          String     @id @unique @default(cuid())
  nome        String?
  tipo        String?
  documento   String?
  telefone    String?
  whatsapp    String?
  email       String?
  detalhes    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cep         String?
  estado      String?
  cidade      String?
  Proposta    Proposta[]
}

model Proposta {
  id        String   @id @unique @default("P${cuid()}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contatoId String
  contato   Contato  @relation(fields: [contatoId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  status    String   @default("aberto")
}

// enum RoleType {
//   user
//   admin
// }
// enum PropostaStatus {
//   ABERTO
//   FECHADO
// RECUSADO
// }
