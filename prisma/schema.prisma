// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum RoleType {
//   user
//   admin
// }
// enum PropostaStatus {
//   ABERTO
//   FECHADO
// RECUSADO
// }
model Company {
  id         String     @id @unique @default(cuid())
  name       String
  cnpj       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  adminUsers User[]     @relation("AdminCompanies")
  sellers    User[]     @relation("SellerCompanies")
  clients    Client[]
  proposals  Proposal[]
  contacts   Contact[] // Corrigido para "contacts"
}

model User {
  id                       String          @id @unique @default(cuid())
  name                     String?
  email                    String          @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  accounts                 Account[]
  sessions                 Session[]
  Authenticators           Authenticator[]
  password                 String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  role                     Role            @default(user)
  tasks                    Task[]
  proposals                Proposal[]
  companies                Company[]       @relation("AdminCompanies") // AdminEmpresa pode ter v치rias empresas
  sellerInCompanyId        String? // Mudado para String
  sellerInCompany          Company?        @relation("SellerCompanies", fields: [sellerInCompanyId], references: [id]) // Um vendedor associado a uma empresa
  clients                  Client[] // Vendedor pode ter v치rios clientes
}

enum Role {
  admin
  user
  adminEmpresa
  vendedor
}

model Client {
  id        String     @id @default(cuid())
  name      String
  email     String
  phone     String
  companyId String // Mudado para String
  company   Company    @relation(fields: [companyId], references: [id])
  userId    String // Mudado para String
  user      User       @relation(fields: [userId], references: [id])
  contactId String // Mudado para String
  contact   Contact    @relation(fields: [contactId], references: [id])
  proposals Proposal[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Proposal {
  id           String       @id @default(cuid())
  description  String
  cost         Float // Custo do kit/inversor
  percentage   Float // Porcentagem de lucro
  total        Float // Valor final
  kanbanStatus KanbanStatus @default(BACKLOG) // Status no Kanban
  companyId    String // Mudado para String
  company      Company      @relation(fields: [companyId], references: [id])
  userId       String // Mudado para String
  user         User         @relation(fields: [userId], references: [id]) // Vendedor respons치vel
  clientId     String // Mudado para String
  client       Client       @relation(fields: [clientId], references: [id])
  tasks        Task[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum KanbanStatus {
  BACKLOG // Proposta nova, aguardando
  EM_PROGRESSO // Proposta em andamento
  CONCLUIDA // Proposta finalizada
  CANCELADA // Proposta cancelada
}

model Task {
  id           String       @id @default(cuid())
  description  String
  kanbanStatus KanbanStatus @default(BACKLOG) // Status no Kanban
  deadline     DateTime?
  proposalId   String
  proposal     Proposal     @relation(fields: [proposalId], references: [id])
  userId       String // Mudado para String
  user         User         @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  companyId String // Mudado para String
  company   Company  @relation(fields: [companyId], references: [id])
  clients   Client[] // Um contato pode estar relacionado a v치rios clientes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
